const { test, expect } = require("@playwright/test")
const { POManager } = require('../pageobjects/POManager')
const { customtest } = require("../utils/test-base")
const userdetails = JSON.parse(JSON.stringify(require('../utils/userdetails.json')))

test.skip('user signup ', async ({ page }) => {

    const poManager = new POManager(page)
    const landingPage = poManager.getlandingPage()
    const registrationPage = poManager.getregistrationpage()
    await landingPage.goTo()
    await landingPage.clickRegistrationLink()
    await expect(await registrationPage.registerUser(userdetails.USER_EMAIL)).toHaveText(userdetails.REGISTRATION_MSG_SUCCESS)
})

customtest(`existing user sign in and complete the checkout - CC Payment`, async ({ page , testDataForOrder }) => {
    const poManager = new POManager(page)
    const landingPage = poManager.getlandingPage()
    const departmentPage = poManager.getdepartmentpage()
    const shoppingCartPage = poManager.getshoppingcartpage()
    const checkoutPage = poManager.getcheckoutpage()
    const orderInformationPage = poManager.getorderinformationpage()
    await landingPage.goTo()
    const userstate = await landingPage.checkUserUponLoginAndValidLogin(testDataForOrder.useremail)
    await departmentPage.clickOnSubcategoryAndAddToCart(testDataForOrder.category, testDataForOrder.subCategory, testDataForOrder.productName)
    //await expect(await departmentPage.productAdditionSuccessMsg()).toHaveText(testDataForOrder.productAdditionSuccessActual)
    await departmentPage.clickOnShoppingCart()
    await shoppingCartPage.productDetailsFromCartPage(testDataForOrder.productName)
    await shoppingCartPage.updateCartWithProductDetails()
    await shoppingCartPage.cartTotal()
    await shoppingCartPage.acceptTnC()
    await shoppingCartPage.goToCheckout()
    await checkoutPage.enterBillingAndShippingDetails(userstate,testDataForOrder.country, testDataForOrder.state, testDataForOrder.city, testDataForOrder.address, testDataForOrder.zipcode, testDataForOrder.phonenumber)
    await checkoutPage.selectShippingMethod(testDataForOrder.shippingMethod)
    await checkoutPage.selectPaymentMethodAndEnterCCDetails(testDataForOrder.cardType, testDataForOrder.cardHolderName, testDataForOrder.cardNumber, testDataForOrder.cardExpiryMonth, testDataForOrder.cardExpiryYear, testDataForOrder.cardCVv)
    await checkoutPage.confirmOrder()
    expect(await orderInformationPage.orderPlacedSuccessMsg()).toEqual(testDataForOrder.orderPlacedSuccessMsg)
    expect(await orderInformationPage.getOrder()).toEqual(await orderInformationPage.openAndValidationOrder(await orderInformationPage.getOrder()))
})